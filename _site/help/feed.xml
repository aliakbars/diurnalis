<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diurnalis</title>
    <description>Private site of aliakbars</description>
    <link>http://aliakbars.github.io/</link>
    <atom:link href="http://aliakbars.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>2015-08-16 09:27:14 +0700</pubDate>
    <lastBuildDate>2015-08-16 09:27:14 +0700</lastBuildDate>
    <generator>Jekyll v</generator>
    
      <item>
        <title>Python Unit Test</title>
        <description>&lt;p&gt;Test-driven development has become more prevalent these days. People started to realize that maintainable working code is more important than writing the documentation of the code. As for me, I started to write test cases for my codes after enrolling the &lt;a href=&quot;https://www.udacity.com/course/viewer#!/c-cs212/l-48532737/e-48737202/m-48692640&quot;&gt;Design of Computer Program class&lt;/a&gt; on Udacity. On the course, you can see that writing unit test can really help you to breakdown the problem you are facing and how to think modularly.&lt;/p&gt;

&lt;p&gt;The easiest way to write a unit test in Python is by using &lt;code&gt;assert&lt;/code&gt;. You just need to declare the function with its parameters and then compare it with the predicted output. You can see the example below.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;python&quot;&gt;def f(x, y):
	return x + y

assert f(1, 1) == 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It might look so simple, but believe me, it will help you that much in terms of solving the problems meticulously step by step.&lt;/p&gt;

&lt;p&gt;Aside from &lt;code&gt;assert&lt;/code&gt;, Python has a package module specifically designed for unit testing called &lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;. The module is a actually a framework that can handle several things in terms of unit testing – based on the site:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;test fixture: the preparation needed for testing, such as proxy database&lt;/li&gt;
  &lt;li&gt;test case: the smallest unit of testing&lt;/li&gt;
  &lt;li&gt;test suite: set of test cases used for integration testing, and&lt;/li&gt;
  &lt;li&gt;test runner: a component which orchestrates the execution of the tests and provides the outcome to the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The script for unit testing using the &lt;code&gt;unittest&lt;/code&gt; module is basically consists of things like these:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;python&quot;&gt;import unittest

class MyTest(unittest.TestCase):
	def setUp(self):
		# Where you define the preparation needed for testing, e.g. database

	def tearDown(self):
		# What to do after the test is completed

	def testCase1(self):
		# Test case #1

	def testCase2(self):
		# Test case #2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The interesting point of using the &lt;code&gt;unittest&lt;/code&gt; module is that you can run the test cases arbitrarily. You can write it in a separate file, or just include it on the same file. Then, when you want to run the test, you just have to run this command from shell:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;python -m unittest &amp;lt;your_test_file_name.py&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Believe me, it is a very good thing to write your own test cases beforehand, so that when you have to change the code, you can always check it easily whether it will work the same way or not. As I’ve been taught, this is the way of designing a computer program. The more test case you write, the robuster your code should be!&lt;/p&gt;

</description>
        <pubDate>2015-06-15 05:24:23 +0700</pubDate>
        <link>http://aliakbars.github.io/python/2015/06/15/python-unit-test/</link>
        <guid isPermaLink="true">http://aliakbars.github.io/python/2015/06/15/python-unit-test/</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>I Just Can't Stop Learning - Flask</title>
        <description>&lt;p&gt;It seems like my mind keeps pushing me to learn something new. I haven’t even done learning Ruby on Rails yet, but I’ve been attracted to learn Python Flask now. Since I now Python better than Ruby, I just can’t resist to at least deploy a “Hello, World!” project to Heroku. You can find it &lt;a href=&quot;http://flask.aliakbars.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://flask.pocoo.org/docs/0.10/&quot;&gt;Flask&lt;/a&gt; is defined as a microframework. As written on their site, a minimal Flask application can be written in just a very few lines:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;python&quot;&gt;from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World!'

if __name__ == '__main__':
    app.run()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See? That’s much easier than writing a &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; app.&lt;/p&gt;

&lt;p&gt;However, since Flask is really simple, the codes can easily be spaghetti. Furthermore, Flask does not come with Cross-Site Request Forgery (CSRF) protection. It is stated clearly on their page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why does Flask not do that for you? The ideal place for this to happen is the form validation framework, which does not exist in Flask.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, I guess it is better to use Flask just as it is intended to in the very first place: simple web app. Nevertheless, when you have to deal with forms or complex algorithm, then Django will come in handy.&lt;/p&gt;

</description>
        <pubDate>2014-12-04 01:50:21 +0700</pubDate>
        <link>http://aliakbars.github.io/python/flask/2014/12/04/i-just-cant-stop-learning/</link>
        <guid isPermaLink="true">http://aliakbars.github.io/python/flask/2014/12/04/i-just-cant-stop-learning/</guid>
        
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Ruby on Rails</title>
        <description>&lt;p&gt;I am trying to learn &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; now. It seems like creating web apps can be effortless when you use Ruby on Rails – even for the Javascript and CSS parts! Learning Ruby on Rails means you will learn one type of syntax to rule them all.&lt;/p&gt;

&lt;p&gt;Ruby on Rails uses &lt;a href=&quot;http://coffeescript.org/&quot;&gt;Coffeescript&lt;/a&gt; to build Javascript files and &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; to build CSS files. By eliminating curly brackets and semi-colon, your code will be more human-readable. They even compile it down to a pretty-printed Javascript and CSS! It is simply awesome.&lt;/p&gt;

&lt;p&gt;Being one of the best web-app development framework, they use Ruby on Rails as a guideline to create Laravel or so I’ve heard. However, I still hesitate to use Ruby on Rails on a daily basis. I am afraid that it will make me faltered when I have to face “raw” Javascript and CSS. I mean, I hate Java now since I’ve learned how to use Python.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

</description>
        <pubDate>2014-11-05 03:38:32 +0700</pubDate>
        <link>http://aliakbars.github.io/ruby-on-rails/2014/11/05/ruby-on-rails/</link>
        <guid isPermaLink="true">http://aliakbars.github.io/ruby-on-rails/2014/11/05/ruby-on-rails/</guid>
        
        
        <category>ruby-on-rails</category>
        
      </item>
    
      <item>
        <title>Google Chart API</title>
        <description>&lt;p&gt;Google makes almost every part of development tools nowadays. And this chart API is one of those pretty cool stuff. Drawing live chart with tooltips is piece of cake with this API.&lt;/p&gt;

&lt;p&gt;It all started when I was looking for a library to draw charts on PHP. I’ve been using &lt;a href=&quot;http://pchart.sourceforge.net/index.php&quot;&gt;pCharts&lt;/a&gt; for some time. However, it is very difficult for me to include it in my CodeIgniter framework. Furthermore, I’m moving to Django now, so I really need to move from pCharts.&lt;/p&gt;

&lt;p&gt;Then, I came across &lt;a href=&quot;http://chartkick.com/&quot;&gt;Chartkick&lt;/a&gt;. It’s simply mesmerizing. It’s free, but rich and powerful. I just need to include one Javascript file and Google API Javascript, and then everything will be as simple as one line on the front-end. Here’s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% line_chart data %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;Pretty cool, eh?&lt;/p&gt;

&lt;p&gt;You should really look for it. You’ll be amazed by how simple drawing charts can be. Go to &lt;a href=&quot;https://developers.google.com/chart/&quot;&gt;Google Charts API page&lt;/a&gt; and explore it yourself!&lt;/p&gt;

</description>
        <pubDate>2014-07-07 22:01:00 +0700</pubDate>
        <link>http://aliakbars.github.io/google/api/2014/07/07/google-chart-api/</link>
        <guid isPermaLink="true">http://aliakbars.github.io/google/api/2014/07/07/google-chart-api/</guid>
        
        
        <category>google</category>
        
        <category>api</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;This is actually an auto-generated post from Jekyll. I just want to edit it so that it looks like it is mine. It is a very cool way for programmer to create a blogpost, since you can just write it down using your favourite text-editor, then – voila! – it is available on the web.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def print_hi(name)
  puts &amp;quot;Hi, #{name}&amp;quot;
end
print_hi('Tom')
#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>2014-07-04 17:19:09 +0700</pubDate>
        <link>http://aliakbars.github.io/jekyll/update/2014/07/04/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://aliakbars.github.io/jekyll/update/2014/07/04/welcome-to-jekyll/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
